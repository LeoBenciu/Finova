generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  email               String            @unique
  role                Role              @default(ADMIN)
  hashPassword        String
  name                String
  phoneNumber         String
  accountingCompanyId Int
  accountingCompany   AccountingCompany @relation(fields: [accountingCompanyId], references: [id])
  rpaActionsTriggered RpaAction[]       @relation("TriggeredByUser")
  legalAgreements     LegalAgreement[]
  userCorrections     UserCorrection[]
}

model LegalAgreement {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  agreementType String
  accepted      Boolean  @default(false)
  acceptedAt    DateTime @default(now())
  ipAddress     String?
  userAgent     String?
  version       String?

  @@unique([userId, agreementType])
  @@index([userId])
}

model Document {
  id                    Int                      @id @default(autoincrement())
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  name                  String
  type                  String
  path                  String
  s3Key                 String
  contentType           String
  fileSize              Int?
  documentHash          String?
  accountingClientId    Int
  accountingClient      AccountingClients        @relation(fields: [accountingClientId], references: [id], onDelete: Cascade)
  processedData         ProcessedData?
  rpaActions            RpaAction[]
  duplicateChecks       DocumentDuplicateCheck[] @relation("OriginalDocument")
  duplicateMatches      DocumentDuplicateCheck[] @relation("DuplicateDocument")
  complianceValidations ComplianceValidation[]
  userCorrections       UserCorrection[]

  @@index([documentHash])
  @@index([accountingClientId])
}

model ProcessedData {
  id              Int      @id @default(autoincrement())
  documentId      Int      @unique
  document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  extractedFields Json
}

model DocumentDuplicateCheck {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  originalDocumentId  Int
  duplicateDocumentId Int
  originalDocument    Document        @relation("OriginalDocument", fields: [originalDocumentId], references: [id], onDelete: Cascade)
  duplicateDocument   Document        @relation("DuplicateDocument", fields: [duplicateDocumentId], references: [id], onDelete: Cascade)
  similarityScore     Float
  matchingFields      Json
  duplicateType       DuplicateType
  status              DuplicateStatus @default(PENDING)

  @@unique([originalDocumentId, duplicateDocumentId])
  @@index([originalDocumentId])
  @@index([duplicateDocumentId])
}

model ComplianceValidation {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  documentId      Int
  document        Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  overallStatus   ComplianceStatus
  validationRules Json
  errors          Json?
  warnings        Json?
  validatedAt     DateTime         @default(now())

  @@index([documentId])
  @@index([overallStatus])
}

model UserCorrection {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  documentId     Int
  document       Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId         Int
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  correctionType CorrectionType
  originalValue  Json
  correctedValue Json
  confidence     Float?
  applied        Boolean        @default(false)

  @@index([documentId])
  @@index([userId])
  @@index([correctionType])
  @@index([applied])
}

model RpaAction {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  documentId         Int
  document           Document          @relation(fields: [documentId], references: [id])
  accountingClientId Int
  accountingClient   AccountingClients @relation(fields: [accountingClientId], references: [id], onDelete: Cascade)
  actionType         RpaActionType
  status             RpaActionStatus   @default(PENDING)
  result             Json?
  triggeredById      Int?
  triggeredBy        User?             @relation("TriggeredByUser", fields: [triggeredById], references: [id])
}

model ClientCompany {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String
  ein               String              @unique
  accountingClients AccountingClients[]
  Article           Article[]
  Management        Management[]
}

model AccountingCompany {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  name              String
  ein               String              @unique
  uipathSubfolder   String
  clientInvoiceRk   String
  supplierInvoiceRk String
  clientReceiptRk   String
  supplierReceiptRk String
  users             User[]
  accountingClients AccountingClients[]
}

model AccountingClients {
  id                  Int               @id @default(autoincrement())
  accountingCompanyId Int
  clientCompanyId     Int
  accountingCompany   AccountingCompany @relation(fields: [accountingCompanyId], references: [id])
  clientCompany       ClientCompany     @relation(fields: [clientCompanyId], references: [id])
  createdAt           DateTime          @default(now())
  documents           Document[]
  rpaActions          RpaAction[]
  articles            Article[]
  managements         Management[]

  @@unique([accountingCompanyId, clientCompanyId])
}

model Article {
  id                 Int               @id @default(autoincrement())
  code               String
  name               String
  vat                VatRate
  unitOfMeasure      UnitOfMeasure
  type               ArticleType
  accountingClientId Int
  accountingClient   AccountingClients @relation(fields: [accountingClientId], references: [id], onDelete: Cascade)
  clientCompanyId    Int
  clientCompany      ClientCompany     @relation(fields: [clientCompanyId], references: [id], onDelete: Cascade)

  @@unique([code, accountingClientId])
  @@index([accountingClientId])
  @@index([clientCompanyId])
}

model Management {
  id                 Int               @id @default(autoincrement())
  code               String
  name               String
  type               ManagementType
  manager            String?
  isSellingPrice     Boolean
  analitic371        String?
  analitic378        String?
  analitic4428       String?
  analitic607        String?
  analitic707        String?
  vatRate            VatRate
  accountingClientId Int
  accountingClient   AccountingClients @relation(fields: [accountingClientId], references: [id], onDelete: Cascade)
  clientCompanyId    Int
  clientCompany      ClientCompany     @relation(fields: [clientCompanyId], references: [id], onDelete: Cascade)

  @@unique([code, accountingClientId])
  @@index([accountingClientId])
  @@index([clientCompanyId])
}

enum ManagementType {
  CANTITATIV_VALORIC
  GLOBAL_VALORIC
}

enum ArticleType {
  MARFURI
  MATERII_PRIME
  PRODUSE_FINITE
  SEMIFABRICATE
  SERVICII_VANDUTE
  MATERIALE_AUXILIARE
  AMBALAJE
  TAXA_VERDE
  OBIECTE_DE_INVENTAR
  AMENAJARI_PROVIZORII
  MATERIALE_SPRE_PRELUCRARE
  MATERIALE_IN_PASTRARE_SAU_CONSIGNATIE
  DISCOUNT_FINANCIAR_INTRARI
  DISCOUNT_FINANCIAR_IESIRI
  COMBUSTIBILI
  PIESE_DE_SCHIMB
  PRODUSE_REZIDUALE
  ALTE_MATERIALE_CONSUMABILE
  DISCOUNT_COMERCIAL_INTRARI
  DISCOUNT_COMERCIAL_IESIRI
  AMBALAJE_SGR
}

enum UnitOfMeasure {
  BUCATA
  KILOGRAM
  LITRU
  METRU
  GRAM
  CUTIE
  PACHET
  PUNGA
  SET
  METRU_PATRAT
  METRU_CUB
  MILIMETRU
  CENTIMETRU
  TONA
  PERECHE
  SAC
  MILILITRU
  KILOWATT_ORA
  MINUT
  ORA
  ZI_DE_LUCRU
  LUNI_DE_LUCRU
  DOZA
  UNITATE_DE_SERVICE
  O_MIE_DE_BUCATI
  TRIMESTRU
  PROCENT
  KILOMETRU
  LADA
  DRY_TONE
  CENTIMETRU_PATRAT
  MEGAWATI_ORA
  ROLA
  TAMBUR
  SAC_PLASTIC
  PALET_LEMN
  UNITATE
  TONA_NETA
  HECTOMETRU_PATRAT
  FOAIE
}

enum VatRate {
  ZERO
  NINETEEN
  NINE
  FIVE
}

enum Role {
  USER
  ADMIN
}

enum RpaActionType {
  DATA_ENTRY
  VALIDATION
  CORRECTION
  OTHER
}

enum RpaActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELED
}

enum DuplicateType {
  EXACT_MATCH
  CONTENT_MATCH
  SIMILAR_CONTENT
}

enum DuplicateStatus {
  PENDING
  CONFIRMED
  DISMISSED
}

enum ComplianceStatus {
  COMPLIANT
  NON_COMPLIANT
  WARNING
  PENDING
}

enum CorrectionType {
  DOCUMENT_TYPE
  INVOICE_DIRECTION
  VENDOR_INFORMATION
  BUYER_INFORMATION
  AMOUNTS
  LINE_ITEMS
  DATES
  OTHER
}
