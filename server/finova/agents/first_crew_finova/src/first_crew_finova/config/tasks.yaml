categorize_document_task:
  description: >
    Read the document at {document_path} and classify it as 'Invoice', 'Receipt', 'Contract', 'Bank Statement', 'Z Report' (set to null if neither).
    Determine the invoice direction using these rules:
    - If buyer_ein = '{client_company_ein}', this is an INCOMING INVOICE.
    - If vendor_ein = '{client_company_ein}', this is an OUTGOING INVOICE.
    Use these labels to identify parties:
    - Vendor labels: {vendor_labels}
    - Buyer labels: {buyer_labels}
    If labels are missing, use hierarchy: company with CUI/bank details (vendor), header position, invoice number prefix, logo, contact details.

    IMPORTANT: Learn from previous user corrections if available. Apply the patterns from corrections to improve accuracy.

    Output a JSON string with 'document_type', 'direction' (for factură), and 'confidence' (0.0-1.0).
    Example: {'document_type': 'Invoice', 'direction': 'incoming', 'confidence': 0.95}
  expected_output: >
    A JSON string with document type, direction (for factură), and confidence score.
  agent: document_categorizer

extract_invoice_data_task:
  description: >
    For a document at {document_path} classified as 'Invoice', extract:
    CURRENT DATE: {current_date} (use as reference - dates should not be after this)

    - vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO'), document_number, document_date (DD-MM-YYYY, must not be after {current_date}), due_date (DD-MM-YYYY, null if absent, must not be after {current_date}), total_amount (numeric), vat_amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON).
    Determine direction using: buyer_ein = '{client_company_ein}' (incoming), vendor_ein = '{client_company_ein}' (outgoing).
    Extract line_items array with: quantity, unit_price, vat_amount, total, type (from {incoming_types} for incoming, {outgoing_types} for outgoing), articleCode (existing or next available), name, vat (from {vat_rates}), um (from {units_of_measure}), account_code (e.g., '624' for transport), management (from {management_records} if not 'Nedefinit'), isNew (true if new).
    Compare articles with {existing_articles}: match by name/code (case-insensitive), set isNew false if matched, assign next articleCode if new.
    For 'Nedefinit' type, set management to null, suggest account_code (e.g., '623' for software).
    IMPORTANT: Always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning about document relevance.
    Output as a JSON string.
  expected_output: >
    A JSON string with invoice details, line_items, and currency information.
  agent: invoice_data_extractor

extract_other_document_data_task:
  description: >
    For non-factură documents at {document_path} of type {doc_type}, extract relevant data:
    CURRENT DATE: {current_date} (use as reference - dates should not be after this)

    -For Receipts: receipt_number, vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO'), total_amount (paid/received), document_date (DD-MM-YYYY, must not be after {current_date}), invoice_reference (The number of the invoice, if available), payment_method(cash/card/bank), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON).
    -For Bank Statements: company_name, company_ein (number only, remove 'RO'), bank_name, account_number (ex: RO70BTRLRONCRT0CL4098501), statement_number, statement_period_start (DD-MM-YYYY, must not be after {current_date}), statement_period_end (DD-MM-YYYY, must not be after {current_date}), opening_balance (numeric, just the number without currency), closing_balance (numeric, just the number without currency), currency, transactions array with: transaction_date (DD-MM-YYYY, must not be after {current_date}), description, reference_number, debit_amount (numeric, null if none, just the number without currency), credit_amount (numeric, null if none, just the number without currency), balance_after_transaction (numeric, just the number without currency), transaction_type (transfer/payment/deposit/withdrawal).
    -For Contracts: contract_number, contract_type, parties array with: name, ein (number only, remove 'RO'), role (client/vendor/contractor), contract_date (DD-MM-YYYY, must not be after {current_date}), start_date (DD-MM-YYYY, must not be after {current_date}), end_date (DD-MM-YYYY), total_value (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), payment_terms, deliverables array with: description, due_date (DD-MM-YYYY), amount (numeric), status (pending/completed).
    -For Payment/Collection Orders: order_number, order_type (payment/collection), payer, payer_ein (number only, remove 'RO'), payee, payee_ein (number only, remove 'RO'), amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), order_date (DD-MM-YYYY, must not be after {current_date}), execution_date (DD-MM-YYYY), reference_invoice, payment_method (bank_transfer/cash/check), bank_details with: account_number, bank_name, swift_code.
    -For Z report: report_number, register_id, business_date (DD-MM-YYYY, must not be after {current_date}), opening_time, closing_time, total_sales (numeric), total_transactions, vat_breakdown array with: vat_rate, net_amount (numeric), vat_amount (numeric), total_amount (numeric), payment_methods array with: method (cash/card), amount (numeric), transaction_count, cancelled_transactions, refunds_amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON).
    IMPORTANT: For receipts, always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning about document relevance.
    For other documents, check if company_ein matches '{client_company_ein}' - if not, add validation_warning.
    Use Romanian date (DD/MM/YYYY) and number formatting (e.g., 1.234,56 RON). Output as a JSON string.
  expected_output: >
    A JSON string with extracted document details including currency information and validation warnings if applicable.
  agent: other_document_data_extractor

detect_duplicates_task:
  description: >
    Compare the current document data with existing documents from {existing_documents} to detect potential duplicates.
    For the document at {document_path}, analyze the extracted data and compare with existing documents based on:
    - Exact file hash match (highest priority)
    - Invoice/document number match
    - Same vendor, amount, and date combination
    - Similar content with high similarity score

    Generate a hash for the current document using the document_hash_generator tool.
    Use the duplicate_detector tool to compare extracted data with existing documents.

    Classify duplicates as:
    - EXACT_MATCH: Same file content (hash match) or identical invoice number + vendor + amount + date
    - CONTENT_MATCH: Same invoice number OR (same vendor + amount + date)
    - SIMILAR_CONTENT: High similarity in multiple fields but not exact match

    Output JSON with: {{'is_duplicate': boolean, 'duplicate_matches': [array of matches], 'document_hash': 'hash_string', 'confidence': float}}
  expected_output: >
    A JSON string with duplicate detection results including matches, hash, and confidence score.
  agent: duplicate_detector_agent

validate_compliance_task:
  description: >
    Validate the Romanian compliance of the document at {document_path} with extracted data.
    CURRENT DATE: {current_date} (use this as reference for date validation)

    Check compliance with Romanian ANAF regulations:

    FOR INVOICES:
    - VAT number format: Must be 2-10 digits for Romanian entities
    - Invoice series and number: Must be continuous and follow ANAF format
    - Required fields: Vendor name/address, buyer name/address, invoice date, amounts
    - VAT rates: Must be 0%, 5%, 9%, or 19% (current Romanian rates)
    - Currency declaration: Foreign currency transactions must be properly declared
    - Amount calculations: VAT calculations must be accurate
    - Invoice date: Must not be after {current_date}, must be within reasonable timeframe

    FOR RECEIPTS:
    - Must contain vendor information with valid CUI/EIN
    - Must have clear transaction date and amount (not after {current_date})
    - Payment method should be specified

    FOR CONTRACTS:
    - Must have valid CUI/EIN for all parties
    - Contract dates must be logical (start <= end, not after {current_date})
    - Must contain essential contract elements

    FOR BANK STATEMENTS:
    - Account number must follow Romanian IBAN format: exactly 'RO' + 22 digits (total 24 characters). Example: RO70BTRLRONCRT0CL4097501 is CORRECT format.
    - Transactions must have proper format and sequence
    - Balances must be mathematically correct  
    - Transaction dates must not be after {current_date}
    - Statement period dates must not be after {current_date}

    Check for common compliance issues:
    - Missing or invalid VAT numbers
    - Incorrect VAT calculations  
    - Missing mandatory fields
    - Invalid date formats
    - Currency compliance for foreign transactions
    - ANAF-specific format requirements
    - Future dates (dates after {current_date})

    IMPORTANT: When validating dates, compare against the current date {current_date}. 
    A date is only "future" if it comes AFTER {current_date}.

    CRITICAL: Generate ALL messages in BOTH languages. Structure your response as follows:
    {{
      "compliance_validation": {{
        "compliance_status": "COMPLIANT|NON_COMPLIANT|WARNING",
        "overall_score": 0.0-1.0,
        "validation_rules": {{
          "ro": ["lista de reguli în română"],
          "en": ["list of rules in english"]
        }},
        "errors": {{
          "ro": ["lista de erori în română"],
          "en": ["list of errors in english"]
        }},
        "warnings": {{
          "ro": ["lista de avertismente în română"],
          "en": ["list of warnings in english"]
        }}
      }}
    }}

    Output JSON with compliance validation results in both Romanian and English.
  expected_output: >
    A JSON string with comprehensive compliance validation results in both Romanian and English.
  agent: compliance_validator_agent
