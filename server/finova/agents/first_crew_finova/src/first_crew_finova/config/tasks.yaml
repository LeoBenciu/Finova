categorize_document_task:
  description: >
    Read the document at {document_path} and classify it as 'Invoice', 'Receipt', 'Contract', 'Bank Statement', 'Z Report', 'Payment Order', 'Collection Order' (set to null if neither).
    Determine the invoice direction using these rules:
    - If buyer_ein = '{client_company_ein}', this is an INCOMING INVOICE.
    - If vendor_ein = '{client_company_ein}', this is an OUTGOING INVOICE.
    Use these labels to identify parties:
    - Vendor labels: {vendor_labels}
    - Buyer labels: {buyer_labels}
    If labels are missing, use hierarchy: company with CUI/bank details (vendor), header position, invoice number prefix, logo, contact details.

    IMPORTANT: Learn from previous user corrections if available. Apply the patterns from corrections to improve accuracy.

    Output a JSON string with 'document_type', 'direction' (for factură), and 'confidence' (0.0-1.0).
    Example: {'document_type': 'Invoice', 'direction': 'incoming', 'confidence': 0.95}
  expected_output: >
    A JSON string with document type, direction (for factură), and confidence score.
  agent: document_categorizer

extract_invoice_data_task:
  description: >
    For a document at {document_path} classified as 'Invoice' with direction '{direction}', extract:
    CURRENT DATE: {current_date} (use as reference - dates should not be after this)

    - vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO'), document_number, document_date (DD-MM-YYYY, must not be after {current_date}), due_date (DD-MM-YYYY, null if absent, must not be after {current_date}), total_amount (numeric), vat_amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), referenced_numbers: array of any document numbers which the current document references(invoices, contracts, receipts, etc.) mentioned anywhere in the invoice text.

    The document has already been categorized as: {doc_type} with direction: {direction}
    Use this information: if buyer_ein = '{client_company_ein}' then it's incoming, if vendor_ein = '{client_company_ein}' then it's outgoing.

    Extract line_items array with: quantity, unit_price, vat_amount, total, type (from {incoming_types} for incoming, {outgoing_types} for outgoing), articleCode (existing or next available), name, vat (from {vat_rates}), um (from {units_of_measure}), account_code (e.g., '624' for transport), management (from {management_records} if not 'Nedefinit'), isNew (true if new).
    Compare articles with {existing_articles}: if the article referes to the same thing/object/service but the naming is different (ex: 'Pix rosu' and 'Pix rosu cu capac'): replace the name of the article with the name from the database, set isNew false, assign the article code from the database. If the articles from the database don't reffer to the same thing/object/service (ex: 'Pix rosu' and 'Pix albastru'): assign next articleCode, set isNew true, leave the article name like it is if it's relevant(always translate in romanian if the article name is in other language).
    For 'Nedefinit' type, set management to null, suggest account_code from the romanian "Plan de conturi" (e.g., '623' - Cheltuieli de protocol, reclamă şi publicitate).
    IMPORTANT: Always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning about document relevance.
    Output as a JSON string.
  expected_output: >
    A JSON string with invoice details, line_items, and currency information.
  agent: invoice_data_extractor

extract_other_document_data_task:
  description: >
    For non-factură documents at {document_path} of type {doc_type}, extract relevant data:
    CURRENT DATE: {current_date} (use as reference - dates should not be after this)

    The document has already been categorized as: {doc_type}

    -For Receipts: receipt_number (make sure that the number is of the receipt not of the invoice for which the receipt was made), vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO'), total_amount (paid/received), document_date (DD-MM-YYYY, must not be after {current_date}), invoice_reference (The number of the invoice, if available), payment_method(cash/card/bank), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), referenced_numbers array listing every document number which the current document references(invoice, contract, receipt, etc.) detected anywhere in the text.
    -For Bank Statements: company_name, company_ein (number only, remove 'RO'), bank_name, account_number (ex: RO70BTRLRONCRT0CL4098501), statement_number, statement_period_start (DD-MM-YYYY, must not be after {current_date}), statement_period_end (DD-MM-YYYY, must not be after {current_date}), opening_balance (numeric, just the number without currency), closing_balance (numeric, just the number without currency), currency, transactions array with: transaction_date (DD-MM-YYYY, must not be after {current_date}), description, reference_number, debit_amount (numeric, null if none, just the number without currency), credit_amount (numeric, null if none, just the number without currency), balance_after_transaction (numeric, just the number without currency), transaction_type (transfer/payment/deposit/withdrawal), referenced_numbers array listing every document number which the current document references(invoice, contract, receipt, etc.) detected anywhere in the text.
    -For Contracts: contract_number, contract_type, parties array with: name, ein (number only, remove 'RO'), role (client/vendor/contractor), contract_date (DD-MM-YYYY, must not be after {current_date}), start_date (DD-MM-YYYY, must not be after {current_date}), end_date (DD-MM-YYYY), total_value (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), payment_terms, deliverables array with: description, due_date (DD-MM-YYYY), amount (numeric), status (pending/completed), referenced_numbers array listing every document number which the current document references(invoice, contract, receipt, etc.) detected anywhere in the text.
    -For Payment/Collection Orders: order_number, order_type (payment/collection), payer, payer_ein (number only, remove 'RO'), payee, payee_ein (number only, remove 'RO'), amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), order_date (DD-MM-YYYY, must not be after {current_date}), execution_date (DD-MM-YYYY), reference_invoice, payment_method (bank_transfer/cash/check), bank_details with: account_number, bank_name, swift_code, referenced_numbers array listing every document number which the current document references(invoice, contract, receipt, etc.) detected anywhere in the text.
    -For Z report: report_number, register_id, business_date (DD-MM-YYYY, must not be after {current_date}), opening_time, closing_time, total_sales (numeric), total_transactions, vat_breakdown array with: vat_rate, net_amount (numeric), vat_amount (numeric), total_amount (numeric), payment_methods array with: method (cash/card), amount (numeric), transaction_count, cancelled_transactions, refunds_amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), referenced_numbers array listing every document number which the current document references(invoice, contract, receipt, etc.) detected anywhere in the text.
    IMPORTANT: For all the documents, always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning about document relevance.
    Use Romanian date (DD/MM/YYYY) and number formatting (e.g., 1.234,56 RON). Output as a JSON string.
  expected_output: >
    A JSON string with extracted document details including currency information and validation warnings if applicable.
  agent: other_document_data_extractor

detect_duplicates_task:
  description: >
    Perform enhanced duplicate detection for the document at {document_path} against existing documents from {existing_documents}.

    CRITICAL DUPLICATE DETECTION RULES:
    1. DOCUMENT TYPE FILTERING: ONLY compare documents of the SAME TYPE
       - Invoice with Invoice only
       - Receipt with Receipt only  
       - Bank Statement with Bank Statement only
       - Contract with Contract only
       - Payment Order with Payment Order only
       - Collection Order with Collection Order only
       - Z Report with Z Report only  
       - NEVER compare different document types (this was causing false positives)

    2. PRIMARY DUPLICATE INDICATORS (in order of priority):
       a) EXACT FILE HASH MATCH = 100% duplicate (identical file content)
       b) DOCUMENT NUMBER + VENDOR EIN + TOTAL AMOUNT + DATE (for invoices)
       c) VENDOR + TOTAL AMOUNT + DATE (for receipts, allow ±7 days date variance)
       d) ACCOUNT NUMBER + STATEMENT PERIOD (for bank statements)

    3. FIELD NORMALIZATION REQUIREMENTS:
       - Remove 'RO' prefix from EIN numbers before comparison
       - Normalize document numbers: remove spaces, dashes, leading zeros
       - Round amounts to 2 decimal places for precise comparison
       - Standardize dates to DD-MM-YYYY format
       - Normalize company names: remove suffixes (SRL, SA, PFA, etc.)
       - Convert all text to uppercase for case-insensitive comparison

    4. ENHANCED SIMILARITY THRESHOLDS (stricter to avoid false positives):
       - EXACT_MATCH: ≥85% similarity score
       - CONTENT_MATCH: ≥70% similarity score  
       - SIMILAR_CONTENT: ≥60% similarity score
       - Below 60% = NOT considered duplicate

    5. DOCUMENT TYPE SPECIFIC SCORING WEIGHTS:
       
       For INVOICES (stricter matching):
       - Document number match: 50% weight (critical for invoices)
       - Total amount exact match: 30% weight
       - Document date exact match: 15% weight (no date variance allowed)
       - Vendor EIN match: 15% weight
       - Currency match: 5% weight
       - Bonus: +10% for multiple exact field matches
       
       For RECEIPTS (more flexible):
       - Vendor name/EIN match: 40% weight
       - Total amount exact match: 30% weight  
       - Document date match: 15% weight (allow ±7 days variance)
       - Document number match: 15% weight (less critical)
       - Currency match: 5% weight
       
       For BANK STATEMENTS:
       - Account number + statement period: 60% weight
       - Bank name + company EIN: 40% weight
       
       For OTHER DOCUMENTS:
       - Use document-specific key fields with balanced weights

    6. DEBUGGING AND LOGGING:
       Always log the following for troubleshooting:
       - Current document type being checked
       - Number of existing documents of the same type found
       - Detailed similarity score calculations for each comparison
       - Specific reasons for duplicate classification
       - Field-by-field comparison results

    7. VALIDATION CHECKS:
       - Verify document_hash is generated correctly
       - Ensure existing_documents contains properly normalized data
       - Confirm similarity scores are between 0.0 and 1.0
       - Validate duplicate_type is one of: EXACT_MATCH, CONTENT_MATCH, SIMILAR_CONTENT

    EXECUTION STEPS:
    1. Generate document hash using document_hash_generator tool
    2. Use enhanced_duplicate_detector tool for intelligent comparison
    3. Apply document-type specific similarity calculations
    4. Return comprehensive results with detailed explanations

    OUTPUT FORMAT:
    Return JSON with:
    {
      "is_duplicate": boolean,
      "duplicate_matches": [
        {
          "document_id": number,
          "similarity_score": float,
          "matching_fields": [strings],
          "duplicate_type": "EXACT_MATCH|CONTENT_MATCH|SIMILAR_CONTENT",
          "reason": "detailed explanation"
        }
      ],
      "document_hash": "string",
      "confidence": float,
      "debug_info": {
        "document_type": "string", 
        "existing_documents_count": number,
        "same_type_documents_count": number,
        "comparison_details": "string"
      }
    }

  expected_output: >
    A comprehensive JSON string with enhanced duplicate detection results, including detailed similarity analysis, document type filtering, and debugging information to prevent false positives.
  agent: duplicate_detector_agent

validate_compliance_task:
  description: >
    Validate the Romanian compliance of the document at {document_path} with extracted data.
    CURRENT DATE: {current_date} (use this as reference for date validation)

    Check compliance with Romanian ANAF regulations:

    FOR INVOICES:
    - VAT number format: Must be 2-10 digits for Romanian entities
    - Invoice series and number: Must be continuous and follow ANAF format
    - Required fields: Vendor name/address, buyer name/address, invoice date, amounts
    - VAT rates: Must be 0%, 5%, 9%, or 19% (current Romanian rates)
    - Currency declaration: Foreign currency transactions must be properly declared
    - Amount calculations: VAT calculations must be accurate
    - Invoice date: Must not be after {current_date}

    FOR RECEIPTS:
    - Must contain vendor information with valid CUI/EIN
    - Must have clear transaction date and amount (not after {current_date})
    - Payment method should be specified

    FOR CONTRACTS:
    - Must have valid CUI/EIN for all parties
    - Contract dates must be logical (start <= end, not after {current_date})
    - Must contain essential contract elements

    FOR BANK STATEMENTS:
    - Account number must follow Romanian IBAN format: exactly 'RO' + 22 digits (total 24 characters). Example: RO70BTRLRONCRT0CL4097501 is CORRECT format.
    - Transactions must have proper format and sequence
    - Balances must be mathematically correct  
    - Transaction dates must not be after {current_date}
    - Statement period dates must not be after {current_date}

    Check for common compliance issues:
    - Missing or invalid VAT numbers
    - Incorrect VAT calculations  
    - Missing mandatory fields
    - Invalid date formats
    - Currency compliance for foreign transactions
    - ANAF-specific format requirements
    - Future dates (dates after {current_date})

    IMPORTANT: When validating dates, compare against the current date {current_date}. 
    A date is only "future" if it comes AFTER {current_date}.

    CRITICAL: Generate ALL messages in BOTH languages. Structure your response as follows:
    {{
      "compliance_validation": {{
        "compliance_status": "COMPLIANT|NON_COMPLIANT|WARNING",
        "overall_score": 0.0-1.0,
        "validation_rules": {{
          "ro": ["lista de reguli în română"],
          "en": ["list of rules in english"]
        }},
        "errors": {{
          "ro": ["lista de erori în română"],
          "en": ["list of errors in english"]
        }},
        "warnings": {{
          "ro": ["lista de avertismente în română"],
          "en": ["list of warnings in english"]
        }}
      }}
    }}

    Output JSON with compliance validation results in both Romanian and English.
  expected_output: >
    A JSON string with comprehensive compliance validation results in both Romanian and English.
  agent: compliance_validator_agent
