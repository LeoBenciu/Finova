categorize_document_task:
  description: >
    Read the document at {document_path} and classify it as 'Invoice', 'Receipt', 'Contract', 'Bank Statement', 'Z Report' (set to null if neither).
    Determine the invoice direction using these rules:
    - If buyer_ein = '{client_company_ein}', this is an INCOMING INVOICE.
    - If vendor_ein = '{client_company_ein}', this is an OUTGOING INVOICE.
    Use these labels to identify parties:
    - Vendor labels: {vendor_labels}
    - Buyer labels: {buyer_labels}
    If labels are missing, use hierarchy: company with CUI/bank details (vendor), header position, invoice number prefix, logo, contact details.
    Output a JSON string with 'document_type' and 'direction' (e.g., {'document_type': 'Invoice', 'direction': 'incoming'}).
  expected_output: >
    A JSON string with document type and direction (for factură).
  agent: document_categorizer

extract_invoice_data_task:
  description: >
    For a document at {document_path} classified as 'Invoice', extract:
    - vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO'), document_number, document_date (DD-MM-YYYY), due_date (DD-MM-YYYY, null if absent), total_amount (numeric), vat_amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON).
    Determine direction using: buyer_ein = '{client_company_ein}' (incoming), vendor_ein = '{client_company_ein}' (outgoing).
    Extract line_items array with: quantity, unit_price, vat_amount, total, type (from {incoming_types} for incoming, {outgoing_types} for outgoing), articleCode (existing or next available), name, vat (from {vat_rates}), um (from {units_of_measure}), account_code (e.g., '624' for transport), management (from {management_records} if not 'Nedefinit'), isNew (true if new).
    Compare articles with {existing_articles}: match by name/code (case-insensitive), set isNew false if matched, assign next articleCode if new.
    For 'Nedefinit' type, set management to null, suggest account_code (e.g., '623' for software).
    IMPORTANT: Always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning about document relevance.
    Output as a JSON string.
  expected_output: >
    A JSON string with invoice details, line_items, and currency information.
  agent: invoice_data_extractor

extract_other_document_data_task:
  description: >
    For non-factură documents at {document_path} of type {doc_type}, extract relevant data :
    -For Receipts: receipt_number, vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO'), total_amount (paid/received), document_date (DD-MM-YYYY), invoice_reference (The number of the invoice, if available), payment_method(cash/card/bank), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON).
    -For Bank Statements: company_name, company_ein (number only, remove 'RO'), bank_name, account_number (ex: RO70BTRLRONCRT0CL4098501), statement_number, statement_period_start (DD-MM-YYYY), statement_period_end (DD-MM-YYYY), opening_balance (numeric, just the number without currency), closing_balance (numeric, just the number without currency), currency, transactions array with: transaction_date (DD-MM-YYYY), description, reference_number, debit_amount (numeric, null if none, just the number without currency), credit_amount (numeric, null if none, just the number without currency), balance_after_transaction (numeric, just the number without currency), transaction_type (transfer/payment/deposit/withdrawal).
    -For Contracts: contract_number, contract_type, parties array with: name, ein (number only, remove 'RO'), role (client/vendor/contractor), contract_date (DD-MM-YYYY), start_date (DD-MM-YYYY), end_date (DD-MM-YYYY), total_value (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), payment_terms, deliverables array with: description, due_date (DD-MM-YYYY), amount (numeric), status (pending/completed).
    -For Payment/Collection Orders: order_number, order_type (payment/collection), payer, payer_ein (number only, remove 'RO'), payee, payee_ein (number only, remove 'RO'), amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON), order_date (DD-MM-YYYY), execution_date (DD-MM-YYYY), reference_invoice, payment_method (bank_transfer/cash/check), bank_details with: account_number, bank_name, swift_code.
    -For Z report: report_number, register_id, business_date (DD-MM-YYYY), opening_time, closing_time, total_sales (numeric), total_transactions, vat_breakdown array with: vat_rate, net_amount (numeric), vat_amount (numeric), total_amount (numeric), payment_methods array with: method (cash/card), amount (numeric), transaction_count, cancelled_transactions, refunds_amount (numeric), currency (RON/EUR/USD/GBP/CHF/JPY/CAD/AUD/SEK/NOK/DKK/PLN/CZK/HUF/BGN - detect from document or default to RON).
    IMPORTANT: For receipts, always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning about document relevance.
    For other documents, check if company_ein matches '{client_company_ein}' - if not, add validation_warning.
    Use Romanian date (DD/MM/YYYY) and number formatting (e.g., 1.234,56 RON). Output as a JSON string.
  expected_output: >
    A JSON string with extracted document details including currency information and validation warnings if applicable.
  agent: other_document_data_extractor
