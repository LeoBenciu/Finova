categorize_document_task:
  description: >
    Read the document at {document_path} and classify it as 'Invoice', 'Receipt', 'Contract', 'Bank Statement', 'Z Report', 'Payment Order', 'Collection Order' (set to null if neither).

    For invoices, determine the invoice direction using these CRITICAL rules:
    - Extract buyer_ein and vendor_ein from the document (remove 'RO' prefix)
    - If buyer_ein = '{client_company_ein}', this is an INCOMING INVOICE (we are buying)
    - If vendor_ein = '{client_company_ein}', this is an OUTGOING INVOICE (we are selling)
    - If neither matches, set direction as 'unknown' and add a warning

    Use these labels to identify parties:
    - Vendor labels: {vendor_labels}
    - Buyer labels: {buyer_labels}

    If labels are missing, use hierarchy: company with CUI/bank details (vendor), header position, invoice number prefix, logo, contact details.

    IMPORTANT: Learn from previous user corrections if available. Apply the patterns from corrections to improve accuracy.

    For other document types, extract basic identifying information:
    - Receipt: vendor_ein and buyer_ein if available
    - Bank Statement: company_ein
    - Contract: party EINs

    CRITICAL: Always extract EIN information to verify document relevance to client company.

    Output a JSON string with 'document_type', 'direction' (for invoices), 'confidence' (0.0-1.0), and relevant EINs.
    Example: {'document_type': 'Invoice', 'direction': 'incoming', 'vendor_ein': '12345678', 'buyer_ein': '87654321', 'confidence': 0.95}
  expected_output: >
    A JSON string with document type, direction (for invoices), relevant EINs, and confidence score.
  agent: document_categorizer

extract_invoice_data_task:
  description: >
    For a document at {document_path} classified as 'Invoice', extract:
    CURRENT DATE: {current_date} (use as reference - dates should not be after this)

    CRITICAL FIELDS TO EXTRACT:
    - vendor, vendor_ein (number only, remove 'RO'), buyer, buyer_ein (number only, remove 'RO')
    - document_number (MUST be extracted - this is critical for duplicate detection)
    - document_date (DD-MM-YYYY, must not be after {current_date})
    - due_date (DD-MM-YYYY, null if absent, must not be after {current_date})
    - total_amount (numeric), vat_amount (numeric)
    - currency (detect from document or default to RON)

    Determine direction: buyer_ein = '{client_company_ein}' (incoming), vendor_ein = '{client_company_ein}' (outgoing).

    FOR LINE ITEMS - INTELLIGENT PROCESSING:
    Direction: {direction} (incoming/outgoing)

    If INCOMING invoice:
    - Compare each line item with existing articles: {existing_articles}
    - Use fuzzy matching for article names (e.g., "transport" ≈ "shipping", "servicii" ≈ "services")
    - If similar article exists (>70% similarity), use its code and name
    - If no match, create new article with next available code
    - Set appropriate type from {incoming_types}

    If OUTGOING invoice:
    - Articles MUST match existing ones from {existing_articles}
    - Use fuzzy matching but be more strict (>50% similarity)
    - If article doesn't exist, still extract but flag as 'unknown_article': true
    - Outgoing invoices should not create new articles

    Line item structure:
    - description (original from invoice)
    - name (matched article name or new name)
    - articleCode (existing or new)
    - quantity, unit_price, vat_amount, total
    - type (from appropriate list)
    - vat (from {vat_rates})
    - um (from {units_of_measure})
    - isNew (boolean)
    - isMatched (boolean)
    - unknown_article (boolean, only for outgoing unmatched)

    IMPORTANT: Always check if buyer_ein or vendor_ein matches '{client_company_ein}' - if neither matches, add validation_warning.
    Output as a JSON string.
  expected_output: >
    A JSON string with invoice details, intelligently processed line_items, and currency information.
  agent: invoice_data_extractor

extract_other_document_data_task:
  description: >
    For non-invoice documents at {document_path} of type {doc_type}, extract relevant data:
    CURRENT DATE: {current_date} (use as reference - dates should not be after this)

    CRITICAL: Always extract document numbers and EINs for duplicate detection and relevance checking.

    -For Receipts: 
      - receipt_number (CRITICAL for duplicate detection)
      - vendor, vendor_ein (number only, remove 'RO')
      - buyer, buyer_ein (number only, remove 'RO') 
      - total_amount, document_date (DD-MM-YYYY)
      - invoice_reference, payment_method, currency
      
    -For Bank Statements: 
      - company_name, company_ein (CRITICAL - must match '{client_company_ein}')
      - bank_name, account_number (Romanian IBAN: RO + 22 digits)
      - statement_number, statement_period_start/end
      - opening_balance, closing_balance, currency
      - transactions array with all details
      
    -For Contracts: 
      - contract_number (CRITICAL for duplicate detection)
      - contract_type, parties array with EINs
      - contract_date, start_date, end_date
      - total_value, currency, payment_terms
      
    -For Payment/Collection Orders:
      - order_number (CRITICAL)
      - order_type, payer/payee with EINs
      - amount, currency, dates
      - bank_details
      
    -For Z report:
      - report_number (CRITICAL)
      - register_id, business_date
      - sales data, VAT breakdown
      
    IMPORTANT: Always verify relevance - check if any EIN matches '{client_company_ein}'.
    Add validation_warning if document doesn't belong to client company.

    Output as a JSON string.
  expected_output: >
    A JSON string with extracted document details including critical identifiers for duplicate detection.
  agent: other_document_data_extractor

detect_duplicates_task:
  description: >
    Compare the current document data with existing documents from {existing_documents} to detect potential duplicates.

    CRITICAL: Only compare documents of the SAME TYPE. Never compare invoices with receipts, etc.

    Document type: {document_type}

    DUPLICATE DETECTION RULES BY DOCUMENT TYPE:

    FOR INVOICES:
    - EXACT_MATCH: Same invoice_number + same vendor_ein + same document_date
    - CONTENT_MATCH: Same vendor_ein + same total_amount + same document_date (within 1 day)
    - SIMILAR_CONTENT: Similar vendor + similar amount (±5%) + date within 7 days

    FOR RECEIPTS:
    - EXACT_MATCH: Same receipt_number + same vendor_ein + same document_date
    - CONTENT_MATCH: Same vendor_ein + same total_amount + same document_date
    - Never mark as duplicate without matching receipt number unless vendor+amount+date all match

    FOR BANK STATEMENTS:
    - EXACT_MATCH: Same statement_number + same account_number + same period
    - CONTENT_MATCH: Same account + overlapping date periods

    FOR CONTRACTS:
    - EXACT_MATCH: Same contract_number + same parties
    - CONTENT_MATCH: Same parties + same dates + same value

    Generate a hash for the current document using the document_hash_generator tool.

    IMPORTANT: 
    - Filter existing_documents to only include same document_type before comparison
    - Be strict with duplicate detection - avoid false positives
    - Consider business logic (e.g., multiple valid receipts from same vendor on same day)

    Output JSON with: {{'is_duplicate': boolean, 'duplicate_matches': [array of matches with reasons], 'document_hash': 'hash_string', 'confidence': float}}
  expected_output: >
    A JSON string with duplicate detection results including matches, hash, confidence score, and clear reasoning.
  agent: duplicate_detector_agent

validate_compliance_task:
  description: >
    Validate the Romanian compliance of the document at {document_path} with extracted data.
    CURRENT DATE: {current_date} (use this as reference for date validation)

    Document type: {document_type}

    Check compliance with Romanian ANAF regulations:

    FOR INVOICES:
    - VAT number format: Must be 2-10 digits for Romanian entities
    - Invoice series and number: Must be present and follow ANAF format
    - Required fields: Vendor name/address, buyer name/address, invoice date, amounts
    - VAT rates: Must be 0%, 5%, 9%, or 19% (current Romanian rates)
    - Currency declaration: Foreign currency transactions must be properly declared
    - Amount calculations: VAT calculations must be accurate (total = subtotal + VAT)
    - Invoice date: Must not be after {current_date}, must be within reasonable timeframe
    - Line items: Each must have description, quantity, unit price, VAT rate

    FOR RECEIPTS:
    - Must contain vendor information with valid CUI/EIN
    - Must have receipt number and clear transaction date (not after {current_date})
    - Payment method should be specified
    - Amount must be clearly stated

    FOR CONTRACTS:
    - Must have valid CUI/EIN for all parties
    - Contract dates must be logical (start <= end, not after {current_date})
    - Must contain essential contract elements (object, value, duration)
    - Signatures and stamps requirements

    FOR BANK STATEMENTS:
    - Account number must follow Romanian IBAN format: exactly 'RO' + 22 digits (total 24 characters)
    - Transactions must have proper format and sequence
    - Balances must be mathematically correct (opening + transactions = closing)
    - Transaction dates must not be after {current_date}
    - Each transaction needs clear description and amount

    Check for common compliance issues:
    - Missing or invalid VAT numbers (format: RO + 2-10 digits)
    - Incorrect VAT calculations (verify: VAT = subtotal * rate)
    - Missing mandatory fields per document type
    - Invalid date formats (must be DD-MM-YYYY)
    - Currency compliance for foreign transactions
    - ANAF-specific format requirements
    - Future dates (any date after {current_date})
    - Mathematical inconsistencies in totals

    IMPORTANT: When validating dates, compare against the current date {current_date}. 
    A date is only "future" if it comes AFTER {current_date}.

    CRITICAL: Generate ALL messages in BOTH languages. Structure your response as follows:
    {{
      "compliance_validation": {{
        "compliance_status": "COMPLIANT|NON_COMPLIANT|WARNING",
        "overall_score": 0.0-1.0,
        "validation_rules": {{
          "ro": ["lista de reguli validate"],
          "en": ["list of validated rules"]
        }},
        "errors": {{
          "ro": ["lista de erori găsite"],
          "en": ["list of errors found"]
        }},
        "warnings": {{
          "ro": ["lista de avertismente"],
          "en": ["list of warnings"]
        }}
      }}
    }}

    Output JSON with compliance validation results in both Romanian and English.
  expected_output: >
    A JSON string with comprehensive compliance validation results in both Romanian and English.
  agent: compliance_validator_agent
